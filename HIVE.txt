总结1：
Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件存储在HDFS做统计,数据映射表，底层计算是mapreduce,运行在yarn上，并提供SQL查询
用户client SQL语句，映射表和数据==导入到HDFS====metastore元数据/derby,有表对应的文件path==HIVE解析器解析SQL(解析，编译，优化，执行spark)===mapreduce执行计算==client
接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。
bin/hadoop fs -chmod g+w /user/hive/warehouse
Hive优势在于处理大数据，
Hive支持用户自定义函数
因为Hive的执行延迟比较高。
迭代式算法无法表达
数据挖掘方面不擅长
Hive 在查询数据的时候，由于没有索引
Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的。
驱动器：Driver
		（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。
		（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。
		（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。
		（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。
安装
mv apache-hive-1.2.1-bin/ hive
mv hive-env.sh.template hive-env.sh
配置hive-env.sh文件		
		export HADOOP_HOME=/opt/module/hadoop-2.7.2
		export HIVE_CONF_DIR=/opt/module/hive/conf
sbin/start-dfs.sh			
sbin/start-yarn.sh
（2）在HDFS上创建/tmp和/user/hive/warehouse两个目录并修改他们的同组权限可写
bin/hadoop fs -mkdir /tmp                        /////////就是存储hive里面创建数据表等数据的位置，相当于数据库
bin/hadoop fs -mkdir -p /user/hive/warehouse   //////////就是存储hive里面创建数据表等数据的位置，相当于数据库
bin/hadoop fs -chmod g+w /tmp
bin/hadoop fs -chmod g+w /user/hive/warehouse
	bin/hive
	show databases;
	use default;
	show tables;
	create table student(id int, name string);
	desc student;
	insert into student values(1000,"ss");//yarn上启动
	select * from student;
	quit;
	drop table student;
导入数据
		1001	zhangshan
		1002	lishi
		1003	zhaoliu
		注意以tab键间隔
	创建student表, 并声明文件分隔符’\t’
		hive> create table student(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';====\   DELIMITED
	（7）加载/opt/module/datas/student.txt 文件到student数据库表中。
		hive> load data local inpath '/opt/module/datas/student.txt' into table student;
Metastore默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore;
mysql安装
	rpm -qa|grep mysql
	rpm -e --nodeps mysql-libs-5.1.73-7.el6.x86_64
	unzip mysql-libs.zip
	rpm -ivh MySQL-server-5.6.24-1.el6.x86_64.rpm
	service mysql status    ====Unit mysqld.service could not be found====】、
									 rpm 默认安装目录是/usr/share/mysql ,启动mysql的方式是该目录下的mysql.server，find  /  -name mysql.server
									 mysql.server 复制到 /etc/init.d/mysqld 下并重命名为mysqld ,然后可以永service mysqld status 这样的方式操作了。
									 centos7不支持====yum install mariadb-server
									 wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm
									 yum localinstall mysql80-community-release-el7-1.noarch.rpm
									 yum repolist enabled | grep "mysql.*-community.*"
									 yum install -y mysql-community-server
									 systemctl start mysqld
									 systemctl status mysqld
									 systemctl enable mysqld ===开机启动
									 systemctl daemon-reload  ===开机启动
									 以上可不看
									 rpm -pa | grep mysql 
									 find / -name mysql  ===看好不需要的删掉
									 rm -rf /var/lib/mysql
									 rpm -pa | grep mariadb   ===与MYSQL冲突
									 rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64
									 然后可以安装的
									重装
									rpm -ivh xxx.rpm
									重复安装时需加属性：
									软件包重复安装将会失败，若仍需要安装必须加 --replacepkgs 属性 

									软件包的某个文件已在安装其他软件包时安装过，则安装将会失败，若仍需要安装必须加 --replacefiles  属性
									解决依赖问题：
									加上 --nodeps 属性，不考虑依赖关系
									强制安装：
									加上 --force 属性，强制进行安装
	cat /root/.mysql_secret   ==kAYIepXjY5PHM9I4
	service mysql start
	rpm -ivh MySQL-client-5.6.24-1.el6.x86_64.rpm
	
		bash: mysql: command not found...
	mysql -uroot -pOEXaQuS8IWkG19Xs
	SET PASSWORD=PASSWORD('000000');
	exit
	配置只要是root用户+密码，在任何主机上都能登录MySQL数据库。
	mysql -uroot -p000000
	show databases;
	use mysql;
	show tables;
	desc user;
	select User, Host, Password from user;
	update user set host='%' where host='localhost';
	mysql>delete from user where Host='hadoop102';
	mysql>delete from user where Host='127.0.0.1';
	mysql>delete from user where Host='::1';
	flush privileges;
	quit;

	配置只要是root用户+密码，在任何主机上都能登录MySQL数据库。
	mysql -uroot -p000000
	show databases;
	use mysql;
	show tables;
	desc user;
	select User, Host, Password from user;
	update user set host='%' where host='localhost';
	mysql>delete from user where Host='hadoop102';
	mysql>delete from user where Host='127.0.0.1';
	mysql>delete from user where Host='::1';
	flush privileges;
	quit;
	
	tar -zxvf mysql-connector-java-5.1.27.tar.gz
	cp mysql-connector-java-5.1.27-bin.jar /opt/module/hive/lib/
	
	配置Metastore到MySql
	/opt/module/hive/conf目录下创建一个hive-site.xml
	拷贝参数
什么是Hive
	Hive：由Facebook开源用于解决海量结构化日志的数据统计。
	Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类SQL查询功能。
	本质是：将HQL转化成MapReduce程序
		1）Hive处理的数据存储在HDFS
	    2）Hive分析数据底层的实现是MapReduce
		3）执行程序运行在Yarn上
		
		
优点
	1)操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。
	2)避免了去写MapReduce，减少开发人员的学习成本。
	3)Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。
	4)Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。
	5)Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。

可扩展性
Hive是建立在Hadoop之上的，因此Hive的可扩展性是和Hadoop的可扩展性是一致的	
Hive建立在集群上并可以利用MapReduce进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。数据规模
缺点
	1．Hive的HQL表达能力有限
		（1）迭代式算法无法表达
		（2）数据挖掘方面不擅长，由于MapReduce数据处理流程的限制，效率更高的算法却无法实现。
	2．Hive的效率比较低
		（1）Hive自动生成的MapReduce作业，通常情况下不够智能化
		（2）Hive调优比较困难，粒度较粗

Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。
由于MapReduce 本身具有较高的延迟，因此在利用MapReduce 执行Hive查询时，也会有较高的延迟

原理		
	1．用户接口：Client
		CLI（command-line interface）、JDBC/ODBC(jdbc访问hive)、WEBUI（浏览器访问hive）
	2．元数据：Metastore
		元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；
		默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore
	3．Hadoop
		使用HDFS进行存储，使用MapReduce进行计算。
	4．驱动器：Driver
		（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。
		（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。
		（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。
		（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。
	
Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。
	
 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。


hive 与数据库区别：
	由于SQL被广泛的应用在数据仓库中，因此，专门针对Hive的特性设计了类SQL的查询语言HQL。熟悉SQL开发的开发者可以很方便的使用Hive进行开发
	Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。
	由于Hive是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的。
	而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO …  VALUES 添加数据，使用 UPDATE … SET修改数据。
	Hive中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的。而数据库通常有自己的执行引擎
	
	Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高
	由于MapReduce 本身具有较高的延迟，因此在利用MapReduce 执行Hive查询时，也会有较高的延迟



Hive安装及配置
	（1）把apache-hive-1.2.1-bin.tar.gz上传到linux的/opt/software目录下
	
	（2）解压apache-hive-1.2.1-bin.tar.gz到/opt/module/目录下面
	
		[atguigu@hadoop102 software]$ tar -zxvf apache-hive-1.2.1-bin.tar.gz -C /opt/module/
	
	（3）修改apache-hive-1.2.1-bin.tar.gz的名称为hive
		[atguigu@hadoop102 module]$ mv apache-hive-1.2.1-bin/ hive
	
	（4）修改/opt/module/hive/conf目录下的hive-env.sh.template名称为hive-env.sh
		[atguigu@hadoop102 conf]$ mv hive-env.sh.template hive-env.sh
	
	（5）配置hive-env.sh文件		
		（a）配置HADOOP_HOME路径
			export HADOOP_HOME=/opt/module/hadoop-2.7.2
	
		（b）配置HIVE_CONF_DIR路径
			export HIVE_CONF_DIR=/opt/module/hive/conf
			
			
2．Hadoop集群配置
	（1）必须启动hdfs和yarn
		[atguigu@hadoop102 hadoop-2.7.2]$ sbin/start-dfs.sh
		[atguigu@hadoop103 hadoop-2.7.2]$ sbin/start-yarn.sh
		
	（2）在HDFS上创建/tmp和/user/hive/warehouse两个目录并修改他们的同组权限可写
	
		[atguigu@hadoop102 hadoop-2.7.2]$ bin/hadoop fs -mkdir /tmp                        /////////就是存储hive里面创建数据表等数据的位置，相当于数据库
		[atguigu@hadoop102 hadoop-2.7.2]$ bin/hadoop fs -mkdir -p /user/hive/warehouse   //////////就是存储hive里面创建数据表等数据的位置，相当于数据库
		[atguigu@hadoop102 hadoop-2.7.2]$ bin/hadoop fs -chmod g+w /tmp
		[atguigu@hadoop102 hadoop-2.7.2]$ bin/hadoop fs -chmod g+w /user/hive/warehouse
		
	3．Hive基本操作
		（1）启动hive
			[atguigu@hadoop102 hive]$ bin/hive
		（2）查看数据库
			hive> show databases;
		（3）打开默认数据库
			hive> use default;
		（4）显示default数据库中的表
			hive> show tables;
		（5）创建一张表
			hive> create table student(id int, name string);
		（6）显示数据库中有几张表
			hive> show tables;
		（7）查看表的结构
			hive> desc student;
		（8）向表中插入数据
			hive> insert into student values(1000,"ss");
		（9）查询表中数据
			hive> select * from student;
		（10）退出hive
			hive> quit;
	说明：（查看hive在hdfs中的结构）
	数据库：在hdfs中表现为${hive.metastore.warehouse.dir}目录下一个文件夹   /user/hive/warehouse
	表：在hdfs中表现所属db目录下一个文件夹，文件夹中存放该表中的具体数据    /tmp/hive/root

将本地文件导入Hive案例
	将本地/opt/module/datas/student.txt这个目录下的数据导入到hive的student(id int, name string)表中。
	1．数据准备
	在/opt/module/datas这个目录下准备数据
	（1）在/opt/module/目录下创建datas
		[atguigu@hadoop102 module]$ mkdir datas
	
	（2）在/opt/module/datas/目录下创建student.txt文件并添加数据
		[atguigu@hadoop102 datas]$ touch student.txt
		[atguigu@hadoop102 datas]$ vi student.txt
		1001	zhangshan
		1002	lishi
		1003	zhaoliu
		注意以tab键间隔。
	
	2．Hive实际操作
	（1）启动hive
	[atguigu@hadoop102 hive]$ bin/hive
	（2）显示数据库
	hive> show databases;
	（3）使用default数据库
	hive> use default;
	（4）显示default数据库中的表
	hive> show tables;
	（5）删除已创建的student表
	hive> drop table student;
	（6）创建student表, 并声明文件分隔符’\t’
	hive> create table student(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED  BY '\t';  ====\   DELIMITED
	（7）加载/opt/module/datas/student.txt 文件到student数据库表中。
	hive> load data local inpath '/opt/module/datas/student.txt' into table student;
	（8）Hive查询结果
	hive> select * from student;
	OK
	1001	zhangshan
	1002	lishi
	1003	zhaoliu
	Time taken: 0.266 seconds, Fetched: 3 row(s)
	3．遇到的问题
	再打开一个客户端窗口启动hive，会产生java.sql.SQLException异常。
	Exception in thread "main" java.lang.RuntimeException: java.lang.RuntimeException:
	 Unable to instantiate
	 org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient
			at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:522)
			at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:677)
			at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:621)
			at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
			at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
			at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
			at java.lang.reflect.Method.invoke(Method.java:606)
			at org.apache.hadoop.util.RunJar.run(RunJar.java:221)
			at org.apache.hadoop.util.RunJar.main(RunJar.java:136)
	Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient
			at org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1523)
			at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.<init>(RetryingMetaStoreClient.java:86)
			at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:132)
			at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:104)
			at org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:3005)
			at org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:3024)
			at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:503)
	... 8 more
	原因是，Metastore默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore;
	
MySql安装
2.4.1 安装包准备
	1．查看mysql是否安装，如果安装了，卸载mysql
		（1）查看
			[root@hadoop102 桌面]# rpm -qa|grep mysql
			mysql-libs-5.1.73-7.el6.x86_64
		（2）卸载
			[root@hadoop102 桌面]# rpm -e --nodeps mysql-libs-5.1.73-7.el6.x86_64
	2．解压mysql-libs.zip文件到当前目录
		[root@hadoop102 software]# unzip mysql-libs.zip
		[root@hadoop102 software]# ls
		mysql-libs.zip
		mysql-libs
	3．进入到mysql-libs文件夹下
		[root@hadoop102 mysql-libs]# ll
总用量 76048
-rw-r--r--. 1 root root 18509960 3月  26 2015 MySQL-client-5.6.24-1.el6.x86_64.rpm
-rw-r--r--. 1 root root  3575135 12月  1 2013 mysql-connector-java-5.1.27.tar.gz
-rw-r--r--. 1 root root 55782196 3月  26 2015 MySQL-server-5.6.24-1.el6.x86_64.rpm

2.4.2 安装MySql服务器
	1．安装mysql服务端
	[root@hadoop102 mysql-libs]# rpm -ivh MySQL-server-5.6.24-1.el6.x86_64.rpm
	2．查看产生的随机密码
	[root@hadoop102 mysql-libs]# cat /root/.mysql_secret
	OEXaQuS8IWkG19Xs
	3．查看mysql状态
	[root@hadoop102 mysql-libs]# service mysql status
	4．启动mysql
	[root@hadoop102 mysql-libs]# service mysql start
	2.4.3 安装MySql客户端
	1．安装mysql客户端
	[root@hadoop102 mysql-libs]# rpm -ivh MySQL-client-5.6.24-1.el6.x86_64.rpm
	2．链接mysql
	[root@hadoop102 mysql-libs]# mysql -uroot -pOEXaQuS8IWkG19Xs
	3．修改密码
	mysql>SET PASSWORD=PASSWORD('000000');
	4．退出mysql
	mysql>exit	
	
MySql中user表中主机配置
	配置只要是root用户+密码，在任何主机上都能登录MySQL数据库。
	1．进入mysql
	[root@hadoop102 mysql-libs]# mysql -uroot -p000000
	2．显示数据库
	mysql>show databases;
	3．使用mysql数据库
	mysql>use mysql;
	4．展示mysql数据库中的所有表
	mysql>show tables;
	5．展示user表的结构
	mysql>desc user;
	6．查询user表
	mysql>select User, Host, Password from user;
	7．修改user表，把Host表内容修改为%
	mysql>update user set host='%' where host='localhost';
	8．删除root用户的其他host
	mysql>delete from user where Host='hadoop102';
	mysql>delete from user where Host='127.0.0.1';
	mysql>delete from user where Host='::1';
	9．刷新
	mysql>flush privileges;
	10．退出
	mysql>quit;
	
Hive元数据配置到MySql
2.5.1 驱动拷贝
	1．在/opt/software/mysql-libs目录下解压mysql-connector-java-5.1.27.tar.gz驱动包
[root@hadoop102 mysql-libs]# tar -zxvf mysql-connector-java-5.1.27.tar.gz
2．拷贝/opt/software/mysql-libs/mysql-connector-java-5.1.27目录下的mysql-connector-java-5.1.27-bin.jar到/opt/module/hive/lib/
[root@hadoop102 mysql-connector-java-5.1.27]# cp mysql-connector-java-5.1.27-bin.jar
 /opt/module/hive/lib/
2.5.2 配置Metastore到MySql
1．在/opt/module/hive/conf目录下创建一个hive-site.xml
[atguigu@hadoop102 conf]$ touch hive-site.xml
[atguigu@hadoop102 conf]$ vi hive-site.xml
2．根据官方文档配置参数，拷贝数据到hive-site.xml文件中
https://cwiki.apache.org/confluence/display/Hive/AdminManual+MetastoreAdmin
<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>
	<property>
	  <name>javax.jdo.option.ConnectionURL</name>
	  <value>jdbc:mysql://hadoop102:3306/metastore?createDatabaseIfNotExist=true</value>
	  <description>JDBC connect string for a JDBC metastore</description>
	</property>

	<property>
	  <name>javax.jdo.option.ConnectionDriverName</name>
	  <value>com.mysql.jdbc.Driver</value>
	  <description>Driver class name for a JDBC metastore</description>
	</property>

	<property>
	  <name>javax.jdo.option.ConnectionUserName</name>
	  <value>root</value>
	  <description>username to use against metastore database</description>
	</property>

	<property>
	  <name>javax.jdo.option.ConnectionPassword</name>
	  <value>000000</value>
	  <description>password to use against metastore database</description>
	</property>
</configuration>
3．配置完毕后，如果启动hive异常，可以重新启动虚拟机。（重启后，别忘了启动hadoop集群）

CentOS7安装mysql后无法启动服务，提示Unit not found
		1、最近在centos7上面进行mysql安装完成后，无法启动，报如下错误：

		Failed to start mysql.server.service: Unit not found.
		2、这个是知乎上面找到的无法启动的答案：https://www.zhihu.com/question/41832866



		3、解决办法一：使用MariaDB代替mysql数据库（MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。）

		# yum install mariadb-server -y //如果已安装可以省略
		# systemctl start mariadb.service //启动服务
		# systemctl enable mariadb.service //开机启动服务
		# mysql -u root -p //登录mysql
		  解决办法二：这个方法就是在 /etc/systemd/system/mysqld.service 添加Unit,既然错误提示找不到Unit那我们添加一个就好了。在 /etc/systemd/system/mysqld.service下添加如下内容

		复制代码
		[Unit]
		Description=MySQL Server
		After=network.target
		 
		[Service]
		ExecStart=/usr/bin/mysqld --defaults-file=/etc/mysql/my.cnf --datadir=/var/lib/mysql --socket=/var/run/mysqld/mysqld.sock User=mysql
		Group=mysql
		WorkingDirectory=/usr
		 
		[Install]
		WantedBy=multi-user.target
		复制代码
		然后运行

		systemctl daemon-reload
		使用重启命令：

		systemctl start mysql.service